module decoder # (parameter dbit = 8)
(
      input clock,
      input reset,
      input sent,
      input [dbits-1:0] datain,
      output [dbits-1:0] dataout,
      output [6:0] address_reg,
      output done);
      
reg [dbits-1:0] out;
reg done = 1'b1;
reg [6:0] address_reg;
reg [1:0] state_reg, state_next;
reg [3:0] n_reg, n_next;
wire write, read, start_timer, done_timer;

localparam [1:0]
		idle  = 2'b00,	// idle state, waiting for done to go low
		start = 2'b01,	// start state, identify the first byte (read or write) and the reg address
		data  = 2'b10,  // data state, shift in 4 bytes of data if read
		stop  = 2'b11;  // stop state, done to go high

always @(posedge clock or posedge reset)
      if (reset)
            begin
            done <= 1'b1;
            state_reg <= idle;  
	    n_reg <= 0;
            end
      else
	      begin
            state_reg <= state_next;
	    n_reg <= n_next;
            end

always @(posedge sent or negedge sent)
    begin
    done <= 1'b0; //data has been received, initiate to read data
    end

always @*
      begin
		// defaults
    	  	state_next   = state_reg;
		n_next = n_reg
        	
		read = 1'b0;
        	write = 1'b0;
		start_timer = 1'b0;
		done_timer = 1'b0;
            
		case (state_reg)
			idle:                                           // idle, wait for done to go low
				if (~done)                                // when done goes low start reading the data
					begin
					state_next = start;             // go to start state
					end
					
			start:                                          // start, decode the first byte
				begin 
				if(datain[0] == 0)
                              		begin
					read = 1'b1                         // '0' start bit means to READ
                              		address_reg = {1'b0, datain[6:0]};  // output the address to be READ
                              
                              	//add a module that will send command to the RAM to READ the following REGISTER ADDR
                              	//once done sending data, go to stop state
                              
                             		state_next = stop;
                              		end
                              
				else if (datain[0] == 1)                 // '1' start bit means to WRITE
					begin
                             		write = 1'b1; 
                              		address_reg = {1'b0, datain[6:0]};  // output the address to be READ
                              
                              	//add a module that will send command to the RAM to WRITE the following REGISTER ADDR
                              	//start the timer module and start sending data 
					
				      	start_timer = 1'b1;
                              		state_next = data;
					end
				done = 1'b1;				//assert done again to 1 for another byte
				end
				
			data:                                           // shift in 4 bytes of data to send to RAM
				begin
				if(~timer_done)
					begin
					if(~done)
						begin
						dataout = datain;
						done = 1'b1;		//assert done again to shift in another byte
						n_next = n_reg + 1;	//count the number of bytes shifted
						end
					end
						
				else if(n_next == 4)                 	// when n_reg counted 4 bytes
					begin
					state_next = stop;
					end
					
				end
				
			stop:                                        	// stop
				begin
					done = 1'b1;			// assert done
					state_next   = idle;     	// go to idle state			            	
				end        
		endcase
		end

      
endmodule
