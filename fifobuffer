module fifobuffer # (parameter abits = 3, dbits = 8)
(
      input clock,
      input reset,
      input write,                        // uart rx done                          
      input read,                         // read done           
      input [dbits-1:0] din,
      output [dbits-1:0] dout   );
 
reg [dbits-1:0] out;
reg [dbits-1:0] regarray[2**abits-1:0];
reg [abits-1:0] heads_reg, heads_next, heads_after;
reg [abits-1:0] tails_reg, tails_next, tails_after;
  
always @(posedge write)
      begin
            regarray[heads_reg] <= din;
      end

always @(posedge clock)
      if (read && (heads_reg != tails_reg))
            begin
            out <= regarray[tails_reg];
            end
 
always @(posedge clock or posedge reset)
      if (reset)
            begin
            heads <= 0;
            tails <= 0;
            end
      else
	      begin
            heads_reg <= heads_next;
            tails_reg  <= tails_next;
            end

always @(*)
      begin
            heads_after = heads_reg + 1;
            tails_after = tails_reg + 1;
            heads_next = heads_reg;
            tails_next = tails_reg;

      if(read && ~write)
	      begin
		tails_next = tails_after;
            end
      else if(write && ~read)
            begin
		heads_next = heads_after;
            end
      else if(write && read)
            begin
		heads_next = heads_after;
		tails_next  = tails_after;
            end
	end 

assign dout = out;

endmodule
